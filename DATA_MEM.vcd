$date
	Fri Jun 21 21:44:58 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module test_Risc_16_bit $end
$var reg 1 ! clk $end
$upscope $end
$scope module test_Risc_16_bit $end
$scope module uut $end
$var wire 1 ! clk $end
$var wire 4 " opcode [3:0] $end
$var wire 9 # control_pipe [8:0] $end
$var wire 2 $ alu_op_code [1:0] $end
$scope module control $end
$var wire 1 ! clk $end
$var wire 3 % read_addr1 [2:0] $end
$var wire 3 & read_addr2 [2:0] $end
$var wire 1 ' write_enable $end
$var wire 16 ( write_data [15:0] $end
$var wire 3 ) write_addr [2:0] $end
$var wire 16 * second_data [15:0] $end
$var wire 1 + reg_dst $end
$var wire 16 , read_data2 [15:0] $end
$var wire 16 - read_data1 [15:0] $end
$var wire 16 . pc_next [15:0] $end
$var wire 16 / pc_jump_shift [15:0] $end
$var wire 16 0 pc_exception [15:0] $end
$var wire 16 1 pc_bne [15:0] $end
$var wire 1 2 pc_beq $end
$var wire 1 3 mem_to_reg $end
$var wire 16 4 mem_read_data [15:0] $end
$var wire 1 5 jump $end
$var wire 16 6 instruction [15:0] $end
$var wire 1 7 flag $end
$var wire 16 8 ext_im [15:0] $end
$var wire 1 9 dat_mem_write_en $end
$var wire 1 : dat_mem_read_en $end
$var wire 1 ; bne $end
$var wire 1 < beq $end
$var wire 1 = alu_src $end
$var wire 16 > alu_out [15:0] $end
$var wire 3 ? alu_control [2:0] $end
$var wire 4 @ OPcode [3:0] $end
$var wire 9 A CONTROL_PIPE [8:0] $end
$var wire 2 B ALU_OPcode [1:0] $end
$var reg 16 C pc_current [15:0] $end
$scope module alu $end
$var wire 16 D B [15:0] $end
$var wire 1 7 FLAG $end
$var wire 3 E ALU_CTRL [2:0] $end
$var wire 16 F A [15:0] $end
$var reg 16 G ALU_OUT [15:0] $end
$upscope $end
$scope module alucu $end
$var wire 4 H OPcode [3:0] $end
$var wire 6 I internal_op_line [5:0] $end
$var wire 2 J ALU_OPcode [1:0] $end
$var reg 3 K ALU_CTRL [2:0] $end
$upscope $end
$scope module dm $end
$var wire 16 L MEMORY_ACCESS_ADDR [15:0] $end
$var wire 1 : MEMORY_READ_ENABLE $end
$var wire 16 M MEMORY_WRITE_DATA [15:0] $end
$var wire 1 9 MEMORY_WRITE_ENABLE $end
$var wire 1 ! clk $end
$var wire 16 N MEMORY_READ_DATA [15:0] $end
$upscope $end
$scope module gpr $end
$var wire 1 ! clk $end
$var wire 3 O reg_read_addr1 [2:0] $end
$var wire 3 P reg_read_addr2 [2:0] $end
$var wire 16 Q reg_read_data1 [15:0] $end
$var wire 16 R reg_read_data2 [15:0] $end
$var wire 3 S reg_write_addr [2:0] $end
$var wire 16 T reg_write_data [15:0] $end
$var wire 1 ' reg_write_en $end
$var integer 32 U i [31:0] $end
$upscope $end
$scope module im $end
$var wire 16 V INSTRUCTION [15:0] $end
$var wire 16 W PC [15:0] $end
$var wire 15 X rom_addr [15:1] $end
$upscope $end
$upscope $end
$scope module cu $end
$var wire 4 Y OPcode [3:0] $end
$var reg 2 Z ALU_OP [1:0] $end
$var reg 9 [ CONTROL_PIPE [8:0] $end
$var reg 1 \ alu_src $end
$var reg 1 ] beq $end
$var reg 1 ^ bne $end
$var reg 1 _ dat_mem_read_en $end
$var reg 1 ` dat_mem_write_en $end
$var reg 1 a jump $end
$var reg 1 b mem_to_reg $end
$var reg 1 c reg_dst $end
$var reg 1 d write_enable $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
1d
0c
1b
0a
0`
1_
0^
0]
1\
bx [
b10 Z
b0 Y
b0 X
b0 W
b10000000000 V
b1000 U
bx T
b0 S
bx R
bx Q
bz P
bz O
bx N
bx M
bx L
b0 K
b10 J
b100000 I
b0 H
bx G
bx F
b0 E
bx D
b0 C
b10 B
bx A
b0 @
b0 ?
bx >
x=
x<
x;
x:
x9
b0 8
x7
b10000000000 6
x5
bx 4
x3
02
b0x0 1
b0x000000000x0 0
b100000000000 /
b10 .
bx -
bx ,
x+
bx *
b0 )
bx (
x'
bz &
bz %
b10 $
bx #
b0 "
0!
$end
#5
0;
1'
13
0+
1=
09
1:
0<
05
b11010100 #
b11010100 A
b11010100 [
b0 $
b0 B
b0 J
b0 Z
0_
0b
0\
1c
bx )
bx S
b0x 0
x2
b0xxxx I
bx "
bx @
bx H
bx Y
bx 8
bx0 /
b0x 1
bx 6
bx V
b0x000000000x X
bx .
b0x000000000x0 C
b0x000000000x0 W
1!
#10
0!
#15
b0 4
b0 N
03
1+
0=
0:
b10100000 #
b10100000 A
b10100000 [
b10 $
b10 B
b10 J
b10 Z
1_
1b
1\
0c
b0 )
b0 S
bx *
bx D
bx M
b100000 I
b0 "
b0 @
b0 H
b0 Y
bx0100000000000 /
b0 8
b10000000000 6
b10000000000 V
b0 X
b0x C
b0x W
1!
#20
0!
#25
1!
#30
0!
#35
1!
#40
0!
#45
1!
#50
0!
#55
1!
#60
0!
#65
1!
#70
0!
#75
1!
#80
0!
#85
1!
#90
0!
#95
1!
#100
0!
#105
1!
#110
0!
#115
1!
#120
0!
#125
1!
#130
0!
#135
1!
#140
0!
#145
1!
#150
0!
#155
1!
#160
0!
