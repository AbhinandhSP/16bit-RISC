$date
	Sun Jun 23 13:16:02 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module test_Risc_16_bit $end
$var reg 1 ! clk $end
$scope module uut $end
$var wire 1 ! clk $end
$var wire 4 " opcode [3:0] $end
$var wire 9 # control_pipe [8:0] $end
$var wire 2 $ alu_op_code [1:0] $end
$scope module control $end
$var wire 1 ! clk $end
$var wire 1 % write_enable $end
$var wire 16 & write_data [15:0] $end
$var wire 3 ' write_addr [2:0] $end
$var wire 16 ( second_data [15:0] $end
$var wire 1 ) reg_dst $end
$var wire 16 * read_data2 [15:0] $end
$var wire 16 + read_data1 [15:0] $end
$var wire 3 , read_addr2 [2:0] $end
$var wire 3 - read_addr1 [2:0] $end
$var wire 16 . pc_next [15:0] $end
$var wire 16 / pc_jump_shift [15:0] $end
$var wire 16 0 pc_exception [15:0] $end
$var wire 16 1 pc_bne [15:0] $end
$var wire 16 2 pc_beq [15:0] $end
$var wire 1 3 mem_to_reg $end
$var wire 16 4 mem_read_data [15:0] $end
$var wire 1 5 jump $end
$var wire 16 6 instruction [15:0] $end
$var wire 1 7 flag $end
$var wire 16 8 ext_im [15:0] $end
$var wire 1 9 dat_mem_write_en $end
$var wire 1 : dat_mem_read_en $end
$var wire 1 ; bne $end
$var wire 1 < beq $end
$var wire 1 = alu_src $end
$var wire 16 > alu_out [15:0] $end
$var wire 3 ? alu_control [2:0] $end
$var wire 4 @ OPcode [3:0] $end
$var wire 9 A CONTROL_PIPE [8:0] $end
$var wire 2 B ALU_OPcode [1:0] $end
$var reg 16 C pc_current [15:0] $end
$scope module alu $end
$var wire 16 D B [15:0] $end
$var wire 1 7 FLAG $end
$var wire 3 E ALU_CTRL [2:0] $end
$var wire 16 F A [15:0] $end
$var reg 16 G ALU_OUT [15:0] $end
$upscope $end
$scope module alucu $end
$var wire 4 H OPcode [3:0] $end
$var wire 6 I internal_op_line [5:0] $end
$var wire 2 J ALU_OPcode [1:0] $end
$var reg 3 K ALU_CTRL [2:0] $end
$upscope $end
$scope module dm $end
$var wire 16 L MEMORY_ACCESS_ADDR [15:0] $end
$var wire 1 : MEMORY_READ_ENABLE $end
$var wire 16 M MEMORY_WRITE_DATA [15:0] $end
$var wire 1 9 MEMORY_WRITE_ENABLE $end
$var wire 1 ! clk $end
$var wire 16 N MEMORY_READ_DATA [15:0] $end
$upscope $end
$scope module gpr $end
$var wire 1 ! clk $end
$var wire 3 O reg_read_addr1 [2:0] $end
$var wire 3 P reg_read_addr2 [2:0] $end
$var wire 16 Q reg_read_data1 [15:0] $end
$var wire 16 R reg_read_data2 [15:0] $end
$var wire 3 S reg_write_addr [2:0] $end
$var wire 16 T reg_write_data [15:0] $end
$var wire 1 % reg_write_en $end
$var integer 32 U i [31:0] $end
$upscope $end
$scope module im $end
$var wire 16 V INSTRUCTION [15:0] $end
$var wire 16 W PC [15:0] $end
$var wire 15 X rom_addr [15:1] $end
$upscope $end
$upscope $end
$scope module cu $end
$var wire 4 Y OPcode [3:0] $end
$var reg 2 Z ALU_OP [1:0] $end
$var reg 9 [ CONTROL_PIPE [8:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b11010100 [
b10 Z
b0 Y
b0 X
b0 W
b10000000000 V
b1000 U
b1 T
b0 S
b0 R
b0 Q
b0 P
b10 O
b1 N
b0 M
b0 L
b0 K
b10 J
b100000 I
b0 H
b0 G
b0 F
b0 E
b0 D
b0 C
b10 B
b11010100 A
b0 @
b0 ?
b0 >
1=
0<
0;
1:
09
b0 8
17
b10000000000 6
05
b1 4
13
b10 2
b10 1
b10 0
b100000000000 /
b10 .
b10 -
b0 ,
b0 +
b0 *
0)
b0 (
b0 '
b1 &
1%
b10 $
b11010100 #
b0 "
0!
$end
#20
b10 &
b10 T
07
b10 4
b10 N
b1 >
b1 G
b1 L
b100 0
b1 '
b1 S
b1 (
b1 D
b1 M
b100 1
b1 ,
b1 P
b100010000010 /
b1 8
b100 2
b10001000001 6
b10001000001 V
b1 X
b0 *
b0 R
b100 .
b10 C
b10 W
1!
#40
0!
#60
b10 '
b10 S
b11 &
b11 T
b0 4
b0 N
0:
03
0=
1)
b110 0
b11 >
b11 G
b11 L
b0 $
b0 B
b0 J
b0 Z
b10100000 #
b10100000 A
b10100000 [
b10 (
b10 D
b10 M
b110 1
b1 +
b1 F
b1 Q
b0 -
b0 O
b10 I
b10 "
b10 @
b10 H
b10 Y
b10100000 /
b10000 8
b110 2
b10000001010000 6
b10000001010000 V
b10 X
b110 .
b100 C
b100 W
b10 *
b10 R
1!
#80
0!
#100
b10 &
b10 T
19
0%
1=
0)
b1000 0
b0 (
b0 D
b0 M
b10 >
b10 G
b10 L
b10 $
b10 B
b10 J
b10 Z
b11000 #
b11000 A
b11000 [
b10 '
b10 S
b1000 1
b11 *
b11 R
b10 ,
b10 P
b10 +
b10 F
b10 Q
b1 -
b1 O
b100001 I
b1 "
b1 @
b1 H
b1 Y
b10100000000 /
b0 8
b1000 2
b1001010000000 6
b1001010000000 V
b11 X
b1000 .
b110 C
b110 W
1!
#120
0!
#140
b1111111111111111 &
b1111111111111111 T
09
1%
0=
1)
b1010 0
b1111111111111111 >
b1111111111111111 G
b1111111111111111 L
b1 ?
b1 E
b1 K
b0 $
b0 B
b0 J
b0 Z
b10100000 #
b10100000 A
b10100000 [
b10 '
b10 S
b10 (
b10 D
b10 M
b1010 1
b10 *
b10 R
b1 ,
b1 P
b1 +
b1 F
b1 Q
b0 -
b0 O
b11 I
b11 "
b11 @
b11 H
b11 Y
b10100000 /
b10000 8
b1010 2
b11000001010000 6
b11000001010000 V
b100 X
b1010 .
b1000 C
b1000 W
1!
#160
0!
#180
b1111111111111110 &
b1111111111111110 T
b1111111111111110 >
b1111111111111110 G
b1111111111111110 L
b1100 0
b10 ?
b10 E
b10 K
b1100 1
b100 I
b100 "
b100 @
b100 H
b100 Y
b1100 2
b100000001010000 6
b100000001010000 V
b101 X
b1100 .
b1010 C
b1010 W
1!
#200
0!
#220
b100 &
b100 T
b100 >
b100 G
b100 L
b1110 0
b11 ?
b11 E
b11 K
b1110 1
b101 I
b101 "
b101 @
b101 H
b101 Y
b1110 2
b101000001010000 6
b101000001010000 V
b110 X
b1110 .
b1100 C
b1100 W
1!
#240
0!
#260
17
b0 &
b0 T
b0 >
b0 G
b0 L
b10000 0
b100 ?
b100 E
b100 K
b10000 1
b110 I
b110 "
b110 @
b110 H
b110 Y
b10000 2
b110000001010000 6
b110000001010000 V
b111 X
b10000 .
b1110 C
b1110 W
1!
#280
0!
#300
b10010 0
b101 ?
b101 E
b101 K
b10010 1
b111 I
b111 "
b111 @
b111 H
b111 Y
b10010 2
b111000001010000 6
b111000001010000 V
b1000 X
b10010 .
b10000 C
b10000 W
1!
#320
0!
#340
07
b11 &
b11 T
b11 >
b11 G
b11 L
b10100 0
b110 ?
b110 E
b110 K
b10100 1
b1000 I
b1000 "
b1000 @
b1000 H
b1000 Y
b10100 2
b1000000001010000 6
b1000000001010000 V
b1001 X
b10100 .
b10010 C
b10010 W
1!
#360
0!
#380
17
b0 &
b0 T
b0 >
b0 G
b0 L
b10110 0
b111 ?
b111 E
b111 K
b10110 1
b1001 I
b1001 "
b1001 @
b1001 H
b1001 Y
b10110 2
b1001000001010000 6
b1001000001010000 V
b1010 X
b10110 .
b10100 C
b10100 W
1!
#400
0!
#420
07
b10 &
b10 T
b10 >
b10 G
b10 L
b11000 0
b1 (
b1 D
b1 M
b0 ?
b0 E
b0 K
b0 '
b0 S
b11000 1
b1 *
b1 R
b0 ,
b0 P
b10 I
b10 "
b10 @
b10 H
b10 Y
b0 /
b0 8
b11000 2
b10000000000000 6
b10000000000000 V
b1011 X
b11000 .
b10110 C
b10110 W
1!
#440
0!
#460
b1 '
b1 S
17
1<
0%
0)
b11100 0
b1 ?
b1 E
b1 K
b1 $
b1 B
b1 J
b1 Z
b10 #
b10 A
b10 [
b11100 1
b1 ,
b1 P
b11011 I
b1011 "
b1011 @
b1011 H
b1011 Y
b10000010 /
b1 8
b0 &
b0 T
b11100 2
b1011000001000001 6
b1011000001000001 V
b1100 X
b0 >
b0 G
b0 L
b10 (
b10 D
b10 M
b11010 .
b11000 C
b11000 W
b10 +
b10 F
b10 Q
b10 *
b10 R
1!
#480
0!
#500
07
b100 &
b100 T
b100 >
b100 G
b100 L
15
0<
b0 0
b0 ?
b0 E
b0 K
b0 $
b0 B
b0 J
b0 Z
b1 #
b1 A
b1 [
b0 '
b0 S
b11110 1
b0 ,
b0 P
b1101 I
b1101 "
b1101 @
b1101 H
b1101 Y
b0 /
b0 8
b11110 2
b1101000000000000 6
b1101000000000000 V
b1110 X
b11110 .
b11100 C
b11100 W
1!
